<!DOCTYPE html>
<html>
  <head>
    <title><%= title %></title>
    <%- include defaultimports %>
  </head>
  <body>

    <%- include nav %>
    <div class="container-fluid">
        <div class="row">
            <div class="col-lg-12">
                <h1 class="page-header">Compare Your Cases</h1>
                <p>Here, you can see then differences in your performance
                    throughout different cases.
                </p>
            </div> 
        </div>
        <br>
        <div class="row">
            <div class="col-lg-12">
                <style>
/*                     
                    body {
                        font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
                        margin: auto;
                        position: relative;
                        width: 960px;
                    }
                     */
                    form {
                        position: relative;
                        right: 10px;
                        top: 10px;
                    }
                    
                </style>

                <form>
                    <label><input type="radio" name="mode" value="size"> Case 1: Susan &nbsp;&nbsp;&nbsp;&nbsp;</label>
                    <label><input type="radio" name="mode" value="count" checked> Case 2: Cynthia&nbsp;&nbsp;&nbsp;&nbsp;</label>
                    <label><input type="radio" name="mode" value="timescale"> Case 3</label>
                </form>
                <script src="//d3js.org/d3.v3.min.js"></script>
                <script>
                    var width = window.innerWidth * 0.8, /*960*/
                        height = window.innerWidth * 0.8, /*700*/
                        radius = Math.min(width, height) / 2,
                        color = d3.scale.category20c();
                    
                    var svg = d3.select("body").append("svg")
                        .attr("width", width)
                        .attr("height", height)
                        .append("g")
                        .attr("transform", "translate(" + width / 2 + "," + height * .52 + ")");
                    
                    var partition = d3.layout.partition()
                        .sort(null)
                        .size([2 * Math.PI, radius * radius])
                        .value(function(d) { return 1; });
                    
                    var arc = d3.svg.arc()
                        .startAngle(function(d) { return d.x; })
                        .endAngle(function(d) { return d.x + d.dx; })
                        .innerRadius(function(d) { return Math.sqrt(d.y); })
                        .outerRadius(function(d) { return Math.sqrt(d.y + d.dy); });
                    
                    d3.json("/static/flare.json", function(error, root) {
                        if (error) throw error;
                    
                        var path = svg.datum(root).selectAll("path")
                            .data(partition.nodes)
                        .enter().append("path")
                            .attr("display", function(d) { return d.depth ? null : "none"; }) // hide inner ring
                            .attr("d", arc)
                            .style("stroke", "#fff")
                            .style("fill", function(d) { return color((d.children ? d : d.parent).name); })
                            .style("fill-rule", "evenodd")
                            .each(stash);
                    
                        d3.selectAll("input").on("change", function change() {
                        var value = this.value === "count"
                            ? function() { return 1; }
                            : function(d) { return d.size; };
                    
                        path
                            .data(partition.value(value).nodes)
                            .transition()
                            .duration(1500)
                            .attrTween("d", arcTween);
                        });
                    });
                    // Stash the old values for transition.
                    function stash(d) {
                        d.x0 = d.x;
                        d.dx0 = d.dx;
                    }
                    // Interpolate the arcs in data space.
                    function arcTween(a) {
                        var i = d3.interpolate({x: a.x0, dx: a.dx0}, a);
                        return function(t) {
                        var b = i(t);
                        a.x0 = b.x;
                        a.dx0 = b.dx;
                        return arc(b);
                        };
                    }
                    d3.select(self.frameElement).style("height", height + "px");
                </script>
            </div> 
        </div>
        <!-- /.row -->
    </div>


    
    <script src="//code.jquery.com/jquery-1.11.3.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
  </body>
</html>
